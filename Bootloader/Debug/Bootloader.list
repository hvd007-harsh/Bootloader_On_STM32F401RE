
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  0800353c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800353c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184d  00000000  00000000  00028894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161e9  00000000  00000000  0002af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f9e  00000000  00000000  00041179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864dc  00000000  00000000  0004a117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d05f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  000d0644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031f4 	.word	0x080031f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080031f4 	.word	0x080031f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	2201      	movs	r2, #1
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <__io_putchar+0x20>)
 80004ea:	f001 fd3c 	bl	8001f66 <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000008c 	.word	0x2000008c

080004fc <go2App>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void go2App(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	printf("Bootloader Start \r\n");
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <go2App+0x54>)
 8000504:	f002 f9e6 	bl	80028d4 <puts>

	//Check if there is something installed in the app Flash Region
	if(((*(uint32_t * )FLASH_APP_ADDR)& 0x2FFE0000) == 0x20000000)
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <go2App+0x58>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <go2App+0x5c>)
 800050e:	4013      	ands	r3, r2
 8000510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000514:	d114      	bne.n	8000540 <go2App+0x44>
	{
		printf("App Start..\r\n");
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <go2App+0x60>)
 8000518:	f002 f9dc 	bl	80028d4 <puts>
		HAL_Delay(100);
 800051c:	2064      	movs	r0, #100	; 0x64
 800051e:	f000 fc03 	bl	8000d28 <HAL_Delay>
		// jump to the application
		JumpAddress = *(uint32_t*)( FLASH_APP_ADDR + 4);
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <go2App+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction) JumpAddress;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	60bb      	str	r3, [r7, #8]
		//Initialize application's stack pointer
		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <go2App+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f383 8808 	msr	MSP, r3
}
 8000538:	bf00      	nop
		Jump_To_Application();
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4798      	blx	r3
	}
	else{
		//there is no application is installed
		printf("No APP Found \r\n");
	}
}
 800053e:	e002      	b.n	8000546 <go2App+0x4a>
		printf("No APP Found \r\n");
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <go2App+0x68>)
 8000542:	f002 f9c7 	bl	80028d4 <puts>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	0800320c 	.word	0x0800320c
 8000554:	08008000 	.word	0x08008000
 8000558:	2ffe0000 	.word	0x2ffe0000
 800055c:	08003220 	.word	0x08003220
 8000560:	08008004 	.word	0x08008004
 8000564:	08003230 	.word	0x08003230

08000568 <crc16>:

uint32_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000574:	23ff      	movs	r3, #255	; 0xff
 8000576:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000578:	23ff      	movs	r3, #255	; 0xff
 800057a:	73bb      	strb	r3, [r7, #14]
    uint16_t i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800057c:	e011      	b.n	80005a2 <crc16+0x3a>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	7bbb      	ldrb	r3, [r7, #14]
 8000588:	4053      	eors	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	81bb      	strh	r3, [r7, #12]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800058e:	89bb      	ldrh	r3, [r7, #12]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <crc16+0x58>)
 8000592:	5cd2      	ldrb	r2, [r2, r3]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	4053      	eors	r3, r2
 8000598:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 800059a:	89bb      	ldrh	r3, [r7, #12]
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <crc16+0x5c>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80005a2:	887b      	ldrh	r3, [r7, #2]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	807a      	strh	r2, [r7, #2]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1e8      	bne.n	800057e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	021a      	lsls	r2, r3, #8
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	4313      	orrs	r3, r2
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	08003240 	.word	0x08003240
 80005c4:	08003340 	.word	0x08003340

080005c8 <Flash_Write_Data>:
  return sector;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80005da:	f000 fd03 	bl	8000fe4 <HAL_FLASH_Unlock>
//	  }

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<(numberofwords/4))
 80005de:	e01b      	b.n	8000618 <Flash_Write_Data+0x50>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	4413      	add	r3, r2
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	461c      	mov	r4, r3
 80005ee:	4615      	mov	r5, r2
 80005f0:	4622      	mov	r2, r4
 80005f2:	462b      	mov	r3, r5
 80005f4:	68f9      	ldr	r1, [r7, #12]
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 fca0 	bl	8000f3c <HAL_FLASH_Program>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d106      	bne.n	8000610 <Flash_Write_Data+0x48>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3304      	adds	r3, #4
 8000606:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e003      	b.n	8000618 <Flash_Write_Data+0x50>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000610:	f000 fd1a 	bl	8001048 <HAL_FLASH_GetError>
 8000614:	4603      	mov	r3, r0
 8000616:	e009      	b.n	800062c <Flash_Write_Data+0x64>
	   while (sofar<(numberofwords/4))
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	b29b      	uxth	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	4293      	cmp	r3, r2
 8000624:	dbdc      	blt.n	80005e0 <Flash_Write_Data+0x18>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000626:	f000 fcff 	bl	8001028 <HAL_FLASH_Lock>

	   return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800063a:	f000 fb03 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f8bb 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f94d 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000646:	f000 f921 	bl	800088c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Buffer[] = {1,3};
 800064a:	f240 3301 	movw	r3, #769	; 0x301
 800064e:	80bb      	strh	r3, [r7, #4]
  HAL_UART_Transmit(&huart2,Buffer , sizeof(Buffer)/sizeof(uint8_t), HAL_MAX_DELAY);
 8000650:	1d39      	adds	r1, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2202      	movs	r2, #2
 8000658:	484e      	ldr	r0, [pc, #312]	; (8000794 <main+0x160>)
 800065a:	f001 fc84 	bl	8001f66 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart2, Uart_Rx, 2, HAL_MAX_DELAY);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	2202      	movs	r2, #2
 8000664:	494c      	ldr	r1, [pc, #304]	; (8000798 <main+0x164>)
 8000666:	484b      	ldr	r0, [pc, #300]	; (8000794 <main+0x160>)
 8000668:	f001 fd0f 	bl	800208a <HAL_UART_Receive>
 // HAL_UART_Transmit(&huart2,Buffer , sizeof(Buffer)/sizeof(uint8_t), HAL_MAX_DELAY);
  if((Uart_Rx[0]== 0x01 )&&( Uart_Rx[1] == 0x03))
 800066c:	4b4a      	ldr	r3, [pc, #296]	; (8000798 <main+0x164>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10a      	bne.n	800068a <main+0x56>
 8000674:	4b48      	ldr	r3, [pc, #288]	; (8000798 <main+0x164>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d106      	bne.n	800068a <main+0x56>
  {
	  Firmware_Completed_EOF = 0;
 800067c:	4b47      	ldr	r3, [pc, #284]	; (800079c <main+0x168>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	 //
	  Current_Address = FLASH_APP_ADDR;
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <main+0x16c>)
 8000684:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <main+0x170>)
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e002      	b.n	8000690 <main+0x5c>
  }
  else
  {
	  Firmware_Completed_EOF = 1;
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x168>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if 1
  if(Firmware_Completed_EOF== 0)
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x168>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f083 0301 	eor.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d077      	beq.n	800078e <main+0x15a>
  {
	 HAL_UART_Receive(&huart2, &Length, 1, HAL_MAX_DELAY);
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2201      	movs	r2, #1
 80006a4:	4940      	ldr	r1, [pc, #256]	; (80007a8 <main+0x174>)
 80006a6:	483b      	ldr	r0, [pc, #236]	; (8000794 <main+0x160>)
 80006a8:	f001 fcef 	bl	800208a <HAL_UART_Receive>
	 HAL_UART_Receive(&huart2, Uart_Rx, Length, HAL_MAX_DELAY);
 80006ac:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <main+0x174>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4938      	ldr	r1, [pc, #224]	; (8000798 <main+0x164>)
 80006b8:	4836      	ldr	r0, [pc, #216]	; (8000794 <main+0x160>)
 80006ba:	f001 fce6 	bl	800208a <HAL_UART_Receive>
     HAL_UART_Receive(&huart2, crc_data, 2, HAL_MAX_DELAY);
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2202      	movs	r2, #2
 80006c4:	4939      	ldr	r1, [pc, #228]	; (80007ac <main+0x178>)
 80006c6:	4833      	ldr	r0, [pc, #204]	; (8000794 <main+0x160>)
 80006c8:	f001 fcdf 	bl	800208a <HAL_UART_Receive>
     CRC_VALUE = crc16(Uart_Rx,Length);
 80006cc:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <main+0x174>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	4830      	ldr	r0, [pc, #192]	; (8000798 <main+0x164>)
 80006d6:	f7ff ff47 	bl	8000568 <crc16>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <main+0x17c>)
 80006e0:	801a      	strh	r2, [r3, #0]
    if(CRC_VALUE == ((crc_data[0] << 0x08)|(crc_data[1])))
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <main+0x17c>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <main+0x178>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <main+0x178>)
 80006f0:	7852      	ldrb	r2, [r2, #1]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d1cb      	bne.n	8000690 <main+0x5c>
#if 0
    	Previous_Address= Current_Address;
    	Flash_Write_Data(Current_Address, Uart_Rx, 198);
    	Current_Address+198;
#endif
        if((Uart_Rx[0]== 'E') && (Uart_Rx[1]== 'O') && (Uart_Rx[2]== 'F'))
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <main+0x164>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b45      	cmp	r3, #69	; 0x45
 80006fe:	d11a      	bne.n	8000736 <main+0x102>
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <main+0x164>)
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	2b4f      	cmp	r3, #79	; 0x4f
 8000706:	d116      	bne.n	8000736 <main+0x102>
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0x164>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	2b46      	cmp	r3, #70	; 0x46
 800070e:	d112      	bne.n	8000736 <main+0x102>
        {
        	Firmware_Completed_EOF = 1;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x168>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
            Buffer[0]= Buffer[1] = 0xEF;
 8000716:	23ef      	movs	r3, #239	; 0xef
 8000718:	717b      	strb	r3, [r7, #5]
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	713b      	strb	r3, [r7, #4]
      	    HAL_UART_Transmit(&huart2,Buffer , sizeof(Buffer)/sizeof(uint8_t), HAL_MAX_DELAY);
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	2202      	movs	r2, #2
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <main+0x160>)
 8000728:	f001 fc1d 	bl	8001f66 <HAL_UART_Transmit>
      	    Buffer[0]= Buffer[1] = 0x00;
 800072c:	2300      	movs	r3, #0
 800072e:	717b      	strb	r3, [r7, #5]
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	713b      	strb	r3, [r7, #4]
 8000734:	e02d      	b.n	8000792 <main+0x15e>
        else{
//          if((*(__IO uint32_t *) FLASH_APP_ADDR) != 0xFFFFFFFF)
//          {
//        	  Erase_All_Sector();
//          }
          Buffer[0]= Buffer[1] = 0xFF;
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	717b      	strb	r3, [r7, #5]
 800073a:	797b      	ldrb	r3, [r7, #5]
 800073c:	713b      	strb	r3, [r7, #4]
    	  Previous_Address = Current_Address;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <main+0x16c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <main+0x180>)
 8000744:	6013      	str	r3, [r2, #0]
    	  Flash_Write_Data(Current_Address,Uart_Rx,Length);
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <main+0x16c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <main+0x174>)
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	b292      	uxth	r2, r2
 8000750:	4911      	ldr	r1, [pc, #68]	; (8000798 <main+0x164>)
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff38 	bl	80005c8 <Flash_Write_Data>
          Current_Address += Length;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <main+0x174>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0x16c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <main+0x16c>)
 8000766:	6013      	str	r3, [r2, #0]
          memset(Uart_Rx,'\0',Length);
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <main+0x174>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <main+0x164>)
 8000772:	f002 f839 	bl	80027e8 <memset>
    	  HAL_UART_Transmit(&huart2,Buffer , sizeof(Buffer)/sizeof(uint8_t), HAL_MAX_DELAY);
 8000776:	1d39      	adds	r1, r7, #4
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2202      	movs	r2, #2
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <main+0x160>)
 8000780:	f001 fbf1 	bl	8001f66 <HAL_UART_Transmit>
    	  Buffer[0]= Buffer[1] = 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	717b      	strb	r3, [r7, #5]
 8000788:	797b      	ldrb	r3, [r7, #5]
 800078a:	713b      	strb	r3, [r7, #4]
 800078c:	e780      	b.n	8000690 <main+0x5c>
        }
    }

  }else
	{
	  go2App();
 800078e:	f7ff feb5 	bl	80004fc <go2App>
  if(Firmware_Completed_EOF== 0)
 8000792:	e77d      	b.n	8000690 <main+0x5c>
 8000794:	2000008c 	.word	0x2000008c
 8000798:	200000e0 	.word	0x200000e0
 800079c:	200000d0 	.word	0x200000d0
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	08008000 	.word	0x08008000
 80007a8:	200000de 	.word	0x200000de
 80007ac:	200001a8 	.word	0x200001a8
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	200000d8 	.word	0x200000d8

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f80e 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0xcc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <SystemClock_Config+0xcc>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <SystemClock_Config+0xd0>)
 8000806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800082c:	2308      	movs	r3, #8
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f000 feeb 	bl	800161c <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800084c:	f000 f87a 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f94d 	bl	8001b0c <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000878:	f000 f864 	bl	8000944 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f001 fb02 	bl	8001ecc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f839 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_GPIO_Init+0x5c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <MX_GPIO_Init+0x5c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_GPIO_Init+0x5c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2120      	movs	r1, #32
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <MX_GPIO_Init+0x60>)
 8000916:	f000 fe67 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x60>)
 8000930:	f000 fcd6 	bl	80012e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a16:	f000 fc63 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f934 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
  }

  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e009      	b.n	8000ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fcfd 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf1      	blt.n	8000ad0 <_write+0x12>
  }
  return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_close>:

int _close(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_isatty>:

int _isatty(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f001 fe00 	bl	8002794 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20018000 	.word	0x20018000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200001ac 	.word	0x200001ac
 8000bc8:	200001e8 	.word	0x200001e8

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f001 fdbf 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fd07 	bl	8000634 <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c34:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c3c:	200001e4 	.word	0x200001e4

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f931 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe6a 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f911 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200001b0 	.word	0x200001b0

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200001b0 	.word	0x200001b0

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff5c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb0 	bl	8000e90 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000f50:	7e1b      	ldrb	r3, [r3, #24]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_FLASH_Program+0x1e>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e03b      	b.n	8000fd2 <HAL_FLASH_Program+0x96>
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f64:	f000 f87c 	bl	8001060 <FLASH_WaitForLastOperation>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12b      	bne.n	8000fca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f78:	783b      	ldrb	r3, [r7, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f000 f927 	bl	80011d0 <FLASH_Program_Byte>
 8000f82:	e016      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68b8      	ldr	r0, [r7, #8]
 8000f90:	f000 f8fa 	bl	8001188 <FLASH_Program_HalfWord>
 8000f94:	e00d      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d105      	bne.n	8000fa8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f000 f8cf 	bl	8001144 <FLASH_Program_Word>
 8000fa6:	e004      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f000 f897 	bl	80010e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb6:	f000 f853 	bl	8001060 <FLASH_WaitForLastOperation>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_FLASH_Program+0xa4>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_FLASH_Program+0xa4>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001b4 	.word	0x200001b4
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da0b      	bge.n	800100e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_FLASH_Unlock+0x3c>)
 8000ffa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_FLASH_Unlock+0x40>)
 8001000:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	da01      	bge.n	800100e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023c00 	.word	0x40023c00
 8001020:	45670123 	.word	0x45670123
 8001024:	cdef89ab 	.word	0xcdef89ab

08001028 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_FLASH_Lock+0x1c>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_FLASH_Lock+0x1c>)
 8001032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001036:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_FLASH_GetError+0x14>)
 800104e:	69db      	ldr	r3, [r3, #28]
}  
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001b4 	.word	0x200001b4

08001060 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <FLASH_WaitForLastOperation+0x78>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001072:	f7ff fe4d 	bl	8000d10 <HAL_GetTick>
 8001076:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001078:	e010      	b.n	800109c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d00c      	beq.n	800109c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <FLASH_WaitForLastOperation+0x38>
 8001088:	f7ff fe42 	bl	8000d10 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d201      	bcs.n	800109c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e019      	b.n	80010d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e8      	bne.n	800107a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010c6:	f000 f8a5 	bl	8001214 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
  
}  
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001b4 	.word	0x200001b4
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a10      	ldr	r2, [pc, #64]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001102:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001116:	f3bf 8f6f 	isb	sy
}
 800111a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	000a      	movs	r2, r1
 800112a:	2300      	movs	r3, #0
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	3104      	adds	r1, #4
 8001130:	4613      	mov	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40023c00 	.word	0x40023c00

08001144 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <FLASH_Program_Word+0x40>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <FLASH_Program_Word+0x40>)
 8001154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001158:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <FLASH_Program_Word+0x40>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <FLASH_Program_Word+0x40>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <FLASH_Program_Word+0x40>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <FLASH_Program_Word+0x40>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023c00 	.word	0x40023c00

08001188 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 800119a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	801a      	strh	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800122e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001232:	2210      	movs	r2, #16
 8001234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800124c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001250:	2220      	movs	r2, #32
 8001252:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800126a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800126e:	2240      	movs	r2, #64	; 0x40
 8001270:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001288:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	60da      	str	r2, [r3, #12]
  }
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	200001b4 	.word	0x200001b4

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e159      	b.n	80015b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8148 	bne.w	80015aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	2b02      	cmp	r3, #2
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b03      	cmp	r3, #3
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a2 	beq.w	80015aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x2ec>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <HAL_GPIO_Init+0x2f0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x202>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2f4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x1fe>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <HAL_GPIO_Init+0x2f8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x1fa>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <HAL_GPIO_Init+0x2fc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x1f6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a45      	ldr	r2, [pc, #276]	; (80015e0 <HAL_GPIO_Init+0x300>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x1f2>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x2ec>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001526:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_GPIO_Init+0x304>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001550:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157a:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_GPIO_Init+0x304>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_GPIO_Init+0x304>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f aea2 	bls.w	80012fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e267      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d075      	beq.n	8001726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00c      	beq.n	8001660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001646:	4b85      	ldr	r3, [pc, #532]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800164e:	2b08      	cmp	r3, #8
 8001650:	d112      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165e:	d10b      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	4b7e      	ldr	r3, [pc, #504]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d05b      	beq.n	8001724 <HAL_RCC_OscConfig+0x108>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d157      	bne.n	8001724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e242      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x74>
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6f      	ldr	r2, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6c      	ldr	r2, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a68      	ldr	r2, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb1c 	bl	8000d10 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb18 	bl	8000d10 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e207      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xc0>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb08 	bl	8000d10 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fb04 	bl	8000d10 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1f3      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b51      	ldr	r3, [pc, #324]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0xe8>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_RCC_OscConfig+0x240>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1c7      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4937      	ldr	r1, [pc, #220]	; (800185c <HAL_RCC_OscConfig+0x240>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_OscConfig+0x244>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fabd 	bl	8000d10 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fab9 	bl	8000d10 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1a8      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4925      	ldr	r1, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_OscConfig+0x244>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fa9c 	bl	8000d10 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fa98 	bl	8000d10 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e187      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d036      	beq.n	8001874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_RCC_OscConfig+0x248>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff fa7c 	bl	8000d10 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fa78 	bl	8000d10 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e167      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_OscConfig+0x240>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x200>
 800183a:	e01b      	b.n	8001874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_OscConfig+0x248>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa65 	bl	8000d10 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e00e      	b.n	8001868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fa61 	bl	8000d10 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d907      	bls.n	8001868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e150      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
 800185c:	40023800 	.word	0x40023800
 8001860:	42470000 	.word	0x42470000
 8001864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ea      	bne.n	800184a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8097 	beq.w	80019b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b7d      	ldr	r3, [pc, #500]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a7c      	ldr	r2, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b7a      	ldr	r3, [pc, #488]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a73      	ldr	r2, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fa21 	bl	8000d10 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff fa1d 	bl	8000d10 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e10c      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ea>
 80018f8:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x324>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x30c>
 800190e:	4b5f      	ldr	r3, [pc, #380]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a5e      	ldr	r2, [pc, #376]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a5b      	ldr	r2, [pc, #364]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0x324>
 8001928:	4b58      	ldr	r3, [pc, #352]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a57      	ldr	r2, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	4b55      	ldr	r3, [pc, #340]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d015      	beq.n	8001974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f9e2 	bl	8000d10 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f9de 	bl	8000d10 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0cb      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0ee      	beq.n	8001950 <HAL_RCC_OscConfig+0x334>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff f9cc 	bl	8000d10 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197a:	e00a      	b.n	8001992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff f9c8 	bl	8000d10 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0b5      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ee      	bne.n	800197c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a1 	beq.w	8001afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d05c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d141      	bne.n	8001a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_OscConfig+0x478>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f99c 	bl	8000d10 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f998 	bl	8000d10 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e087      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	491b      	ldr	r1, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x478>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f971 	bl	8000d10 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f96d 	bl	8000d10 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e05c      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x416>
 8001a50:	e054      	b.n	8001afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_OscConfig+0x478>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f95a 	bl	8000d10 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f956 	bl	8000d10 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e045      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x444>
 8001a7e:	e03d      	b.n	8001afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e038      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x4ec>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d028      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d121      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11a      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cc      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d90c      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b8      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d044      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d119      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e067      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4934      	ldr	r1, [pc, #208]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f888 	bl	8000d10 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f884 	bl	8000d10 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e04f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d20c      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e032      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4916      	ldr	r1, [pc, #88]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c92:	f000 f821 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	490a      	ldr	r1, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	5ccb      	ldrb	r3, [r1, r3]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe ffe8 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08003440 	.word	0x08003440
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	b090      	sub	sp, #64	; 0x40
 8001cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d00d      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x40>
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	f200 80a1 	bhi.w	8001e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x34>
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0a:	e09b      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d10:	e09b      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d16:	e098      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d028      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	2200      	movs	r2, #0
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	627a      	str	r2, [r7, #36]	; 0x24
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d40:	2100      	movs	r1, #0
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d44:	fb03 f201 	mul.w	r2, r3, r1
 8001d48:	2300      	movs	r3, #0
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a43      	ldr	r2, [pc, #268]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d52:	fba0 1202 	umull	r1, r2, r0, r2
 8001d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d58:	460a      	mov	r2, r1
 8001d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5e:	4413      	add	r3, r2
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	2200      	movs	r2, #0
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	61fa      	str	r2, [r7, #28]
 8001d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d72:	f7fe fa2f 	bl	80001d4 <__aeabi_uldivmod>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7e:	e053      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	2200      	movs	r2, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	617a      	str	r2, [r7, #20]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d92:	f04f 0b00 	mov.w	fp, #0
 8001d96:	4652      	mov	r2, sl
 8001d98:	465b      	mov	r3, fp
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0159      	lsls	r1, r3, #5
 8001da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da8:	0150      	lsls	r0, r2, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ebb2 080a 	subs.w	r8, r2, sl
 8001db2:	eb63 090b 	sbc.w	r9, r3, fp
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dca:	ebb2 0408 	subs.w	r4, r2, r8
 8001dce:	eb63 0509 	sbc.w	r5, r3, r9
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	00eb      	lsls	r3, r5, #3
 8001ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de0:	00e2      	lsls	r2, r4, #3
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
 8001de6:	eb14 030a 	adds.w	r3, r4, sl
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	eb45 030b 	adc.w	r3, r5, fp
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	028b      	lsls	r3, r1, #10
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e08:	4621      	mov	r1, r4
 8001e0a:	028a      	lsls	r2, r1, #10
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	2200      	movs	r2, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	60fa      	str	r2, [r7, #12]
 8001e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e1c:	f7fe f9da 	bl	80001d4 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3740      	adds	r7, #64	; 0x40
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	017d7840 	.word	0x017d7840

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	08003450 	.word	0x08003450

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffdc 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08003450 	.word	0x08003450

08001ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e03f      	b.n	8001f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fd54 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f9cb 	bl	80022ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b08a      	sub	sp, #40	; 0x28
 8001f6a:	af02      	add	r7, sp, #8
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d17c      	bne.n	8002080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_UART_Transmit+0x2c>
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e075      	b.n	8002082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x3e>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e06e      	b.n	8002082 <HAL_UART_Transmit+0x11c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	; 0x21
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fba:	f7fe fea9 	bl	8000d10 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_UART_Transmit+0x82>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e003      	b.n	8001ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ff8:	e02a      	b.n	8002050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f8e2 	bl	80021ce <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e036      	b.n	8002082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3302      	adds	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e007      	b.n	8002042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1cf      	bne.n	8001ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2140      	movs	r1, #64	; 0x40
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f8b2 	bl	80021ce <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af02      	add	r7, sp, #8
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	f040 808c 	bne.w	80021c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_UART_Receive+0x2e>
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e084      	b.n	80021c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Receive+0x40>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e07d      	b.n	80021c6 <HAL_UART_Receive+0x13c>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2222      	movs	r2, #34	; 0x22
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e6:	f7fe fe13 	bl	8000d10 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d108      	bne.n	8002114 <HAL_UART_Receive+0x8a>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	e003      	b.n	800211c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002124:	e043      	b.n	80021ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2120      	movs	r1, #32
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f84c 	bl	80021ce <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e042      	b.n	80021c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002152:	b29a      	uxth	r2, r3
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	3302      	adds	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e01f      	b.n	80021a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d007      	beq.n	800217a <HAL_UART_Receive+0xf0>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_UART_Receive+0xfe>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e008      	b.n	800219a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002194:	b2da      	uxtb	r2, r3
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1b6      	bne.n	8002126 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b090      	sub	sp, #64	; 0x40
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021de:	e050      	b.n	8002282 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d04c      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x30>
 80021ee:	f7fe fd8f 	bl	8000d10 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d241      	bcs.n	8002282 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	e853 3f00 	ldrex	r3, [r3]
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800221e:	637a      	str	r2, [r7, #52]	; 0x34
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002226:	e841 2300 	strex	r3, r2, [r1]
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e5      	bne.n	80021fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3314      	adds	r3, #20
 8002238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	613b      	str	r3, [r7, #16]
   return(result);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002252:	623a      	str	r2, [r7, #32]
 8002254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e5      	bne.n	8002232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e00f      	b.n	80022a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d09f      	beq.n	80021e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3740      	adds	r7, #64	; 0x40
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b0c0      	sub	sp, #256	; 0x100
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	ea40 0301 	orr.w	r3, r0, r1
 80022d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002304:	f021 010c 	bic.w	r1, r1, #12
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002312:	430b      	orrs	r3, r1
 8002314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002326:	6999      	ldr	r1, [r3, #24]
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	ea40 0301 	orr.w	r3, r0, r1
 8002332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <UART_SetConfig+0x2cc>)
 800233c:	429a      	cmp	r2, r3
 800233e:	d005      	beq.n	800234c <UART_SetConfig+0xa0>
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b8d      	ldr	r3, [pc, #564]	; (800257c <UART_SetConfig+0x2d0>)
 8002348:	429a      	cmp	r2, r3
 800234a:	d104      	bne.n	8002356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800234c:	f7ff fdaa 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8002350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002354:	e003      	b.n	800235e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002356:	f7ff fd91 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 800235a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002368:	f040 810c 	bne.w	8002584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800236c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800237a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	1891      	adds	r1, r2, r2
 8002384:	65b9      	str	r1, [r7, #88]	; 0x58
 8002386:	415b      	adcs	r3, r3
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800238a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800238e:	4621      	mov	r1, r4
 8002390:	eb12 0801 	adds.w	r8, r2, r1
 8002394:	4629      	mov	r1, r5
 8002396:	eb43 0901 	adc.w	r9, r3, r1
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	eb18 0303 	adds.w	r3, r8, r3
 80023b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023bc:	462b      	mov	r3, r5
 80023be:	eb49 0303 	adc.w	r3, r9, r3
 80023c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023da:	460b      	mov	r3, r1
 80023dc:	18db      	adds	r3, r3, r3
 80023de:	653b      	str	r3, [r7, #80]	; 0x50
 80023e0:	4613      	mov	r3, r2
 80023e2:	eb42 0303 	adc.w	r3, r2, r3
 80023e6:	657b      	str	r3, [r7, #84]	; 0x54
 80023e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023f0:	f7fd fef0 	bl	80001d4 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <UART_SetConfig+0x2d4>)
 80023fa:	fba3 2302 	umull	r2, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	011c      	lsls	r4, r3, #4
 8002402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800240c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002414:	4642      	mov	r2, r8
 8002416:	464b      	mov	r3, r9
 8002418:	1891      	adds	r1, r2, r2
 800241a:	64b9      	str	r1, [r7, #72]	; 0x48
 800241c:	415b      	adcs	r3, r3
 800241e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002424:	4641      	mov	r1, r8
 8002426:	eb12 0a01 	adds.w	sl, r2, r1
 800242a:	4649      	mov	r1, r9
 800242c:	eb43 0b01 	adc.w	fp, r3, r1
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800243c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002444:	4692      	mov	sl, r2
 8002446:	469b      	mov	fp, r3
 8002448:	4643      	mov	r3, r8
 800244a:	eb1a 0303 	adds.w	r3, sl, r3
 800244e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002452:	464b      	mov	r3, r9
 8002454:	eb4b 0303 	adc.w	r3, fp, r3
 8002458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800246c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002470:	460b      	mov	r3, r1
 8002472:	18db      	adds	r3, r3, r3
 8002474:	643b      	str	r3, [r7, #64]	; 0x40
 8002476:	4613      	mov	r3, r2
 8002478:	eb42 0303 	adc.w	r3, r2, r3
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
 800247e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002486:	f7fd fea5 	bl	80001d4 <__aeabi_uldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4611      	mov	r1, r2
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <UART_SetConfig+0x2d4>)
 8002492:	fba3 2301 	umull	r2, r3, r3, r1
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	1acb      	subs	r3, r1, r3
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <UART_SetConfig+0x2d4>)
 80024a8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024b4:	441c      	add	r4, r3
 80024b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ba:	2200      	movs	r2, #0
 80024bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024c8:	4642      	mov	r2, r8
 80024ca:	464b      	mov	r3, r9
 80024cc:	1891      	adds	r1, r2, r2
 80024ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80024d0:	415b      	adcs	r3, r3
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024d8:	4641      	mov	r1, r8
 80024da:	1851      	adds	r1, r2, r1
 80024dc:	6339      	str	r1, [r7, #48]	; 0x30
 80024de:	4649      	mov	r1, r9
 80024e0:	414b      	adcs	r3, r1
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024f0:	4659      	mov	r1, fp
 80024f2:	00cb      	lsls	r3, r1, #3
 80024f4:	4651      	mov	r1, sl
 80024f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fa:	4651      	mov	r1, sl
 80024fc:	00ca      	lsls	r2, r1, #3
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	4603      	mov	r3, r0
 8002504:	4642      	mov	r2, r8
 8002506:	189b      	adds	r3, r3, r2
 8002508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800250c:	464b      	mov	r3, r9
 800250e:	460a      	mov	r2, r1
 8002510:	eb42 0303 	adc.w	r3, r2, r3
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800252c:	460b      	mov	r3, r1
 800252e:	18db      	adds	r3, r3, r3
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
 8002532:	4613      	mov	r3, r2
 8002534:	eb42 0303 	adc.w	r3, r2, r3
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800253e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002542:	f7fd fe47 	bl	80001d4 <__aeabi_uldivmod>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <UART_SetConfig+0x2d4>)
 800254c:	fba3 1302 	umull	r1, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	2164      	movs	r1, #100	; 0x64
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	3332      	adds	r3, #50	; 0x32
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <UART_SetConfig+0x2d4>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	f003 0207 	and.w	r2, r3, #7
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4422      	add	r2, r4
 8002572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002574:	e105      	b.n	8002782 <UART_SetConfig+0x4d6>
 8002576:	bf00      	nop
 8002578:	40011000 	.word	0x40011000
 800257c:	40011400 	.word	0x40011400
 8002580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002588:	2200      	movs	r2, #0
 800258a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800258e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002596:	4642      	mov	r2, r8
 8002598:	464b      	mov	r3, r9
 800259a:	1891      	adds	r1, r2, r2
 800259c:	6239      	str	r1, [r7, #32]
 800259e:	415b      	adcs	r3, r3
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025a6:	4641      	mov	r1, r8
 80025a8:	1854      	adds	r4, r2, r1
 80025aa:	4649      	mov	r1, r9
 80025ac:	eb43 0501 	adc.w	r5, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	00eb      	lsls	r3, r5, #3
 80025ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025be:	00e2      	lsls	r2, r4, #3
 80025c0:	4614      	mov	r4, r2
 80025c2:	461d      	mov	r5, r3
 80025c4:	4643      	mov	r3, r8
 80025c6:	18e3      	adds	r3, r4, r3
 80025c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025cc:	464b      	mov	r3, r9
 80025ce:	eb45 0303 	adc.w	r3, r5, r3
 80025d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025f2:	4629      	mov	r1, r5
 80025f4:	008b      	lsls	r3, r1, #2
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025fc:	4621      	mov	r1, r4
 80025fe:	008a      	lsls	r2, r1, #2
 8002600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002604:	f7fd fde6 	bl	80001d4 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4b60      	ldr	r3, [pc, #384]	; (8002790 <UART_SetConfig+0x4e4>)
 800260e:	fba3 2302 	umull	r2, r3, r3, r2
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	011c      	lsls	r4, r3, #4
 8002616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261a:	2200      	movs	r2, #0
 800261c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002628:	4642      	mov	r2, r8
 800262a:	464b      	mov	r3, r9
 800262c:	1891      	adds	r1, r2, r2
 800262e:	61b9      	str	r1, [r7, #24]
 8002630:	415b      	adcs	r3, r3
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002638:	4641      	mov	r1, r8
 800263a:	1851      	adds	r1, r2, r1
 800263c:	6139      	str	r1, [r7, #16]
 800263e:	4649      	mov	r1, r9
 8002640:	414b      	adcs	r3, r1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002650:	4659      	mov	r1, fp
 8002652:	00cb      	lsls	r3, r1, #3
 8002654:	4651      	mov	r1, sl
 8002656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265a:	4651      	mov	r1, sl
 800265c:	00ca      	lsls	r2, r1, #3
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	4603      	mov	r3, r0
 8002664:	4642      	mov	r2, r8
 8002666:	189b      	adds	r3, r3, r2
 8002668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800266c:	464b      	mov	r3, r9
 800266e:	460a      	mov	r2, r1
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	67bb      	str	r3, [r7, #120]	; 0x78
 8002682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002690:	4649      	mov	r1, r9
 8002692:	008b      	lsls	r3, r1, #2
 8002694:	4641      	mov	r1, r8
 8002696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269a:	4641      	mov	r1, r8
 800269c:	008a      	lsls	r2, r1, #2
 800269e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026a2:	f7fd fd97 	bl	80001d4 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <UART_SetConfig+0x4e4>)
 80026ac:	fba3 1302 	umull	r1, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	2164      	movs	r1, #100	; 0x64
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	3332      	adds	r3, #50	; 0x32
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <UART_SetConfig+0x4e4>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ca:	441c      	add	r4, r3
 80026cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d0:	2200      	movs	r2, #0
 80026d2:	673b      	str	r3, [r7, #112]	; 0x70
 80026d4:	677a      	str	r2, [r7, #116]	; 0x74
 80026d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026da:	4642      	mov	r2, r8
 80026dc:	464b      	mov	r3, r9
 80026de:	1891      	adds	r1, r2, r2
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	415b      	adcs	r3, r3
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ea:	4641      	mov	r1, r8
 80026ec:	1851      	adds	r1, r2, r1
 80026ee:	6039      	str	r1, [r7, #0]
 80026f0:	4649      	mov	r1, r9
 80026f2:	414b      	adcs	r3, r1
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002702:	4659      	mov	r1, fp
 8002704:	00cb      	lsls	r3, r1, #3
 8002706:	4651      	mov	r1, sl
 8002708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800270c:	4651      	mov	r1, sl
 800270e:	00ca      	lsls	r2, r1, #3
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	4603      	mov	r3, r0
 8002716:	4642      	mov	r2, r8
 8002718:	189b      	adds	r3, r3, r2
 800271a:	66bb      	str	r3, [r7, #104]	; 0x68
 800271c:	464b      	mov	r3, r9
 800271e:	460a      	mov	r2, r1
 8002720:	eb42 0303 	adc.w	r3, r2, r3
 8002724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	663b      	str	r3, [r7, #96]	; 0x60
 8002730:	667a      	str	r2, [r7, #100]	; 0x64
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800273e:	4649      	mov	r1, r9
 8002740:	008b      	lsls	r3, r1, #2
 8002742:	4641      	mov	r1, r8
 8002744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002748:	4641      	mov	r1, r8
 800274a:	008a      	lsls	r2, r1, #2
 800274c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002750:	f7fd fd40 	bl	80001d4 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <UART_SetConfig+0x4e4>)
 800275a:	fba3 1302 	umull	r1, r3, r3, r2
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2164      	movs	r1, #100	; 0x64
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	3332      	adds	r3, #50	; 0x32
 800276c:	4a08      	ldr	r2, [pc, #32]	; (8002790 <UART_SetConfig+0x4e4>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	f003 020f 	and.w	r2, r3, #15
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4422      	add	r2, r4
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278e:	bf00      	nop
 8002790:	51eb851f 	.word	0x51eb851f

08002794 <__errno>:
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <__errno+0x8>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4d0d      	ldr	r5, [pc, #52]	; (80027d8 <__libc_init_array+0x38>)
 80027a4:	4c0d      	ldr	r4, [pc, #52]	; (80027dc <__libc_init_array+0x3c>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	2600      	movs	r6, #0
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	4d0b      	ldr	r5, [pc, #44]	; (80027e0 <__libc_init_array+0x40>)
 80027b2:	4c0c      	ldr	r4, [pc, #48]	; (80027e4 <__libc_init_array+0x44>)
 80027b4:	f000 fd1e 	bl	80031f4 <_init>
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	2600      	movs	r6, #0
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	080034c4 	.word	0x080034c4
 80027dc:	080034c4 	.word	0x080034c4
 80027e0:	080034c4 	.word	0x080034c4
 80027e4:	080034c8 	.word	0x080034c8

080027e8 <memset>:
 80027e8:	4402      	add	r2, r0
 80027ea:	4603      	mov	r3, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <_puts_r>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	460e      	mov	r6, r1
 80027fc:	4605      	mov	r5, r0
 80027fe:	b118      	cbz	r0, 8002808 <_puts_r+0x10>
 8002800:	6983      	ldr	r3, [r0, #24]
 8002802:	b90b      	cbnz	r3, 8002808 <_puts_r+0x10>
 8002804:	f000 fa48 	bl	8002c98 <__sinit>
 8002808:	69ab      	ldr	r3, [r5, #24]
 800280a:	68ac      	ldr	r4, [r5, #8]
 800280c:	b913      	cbnz	r3, 8002814 <_puts_r+0x1c>
 800280e:	4628      	mov	r0, r5
 8002810:	f000 fa42 	bl	8002c98 <__sinit>
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <_puts_r+0xd0>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d120      	bne.n	800285c <_puts_r+0x64>
 800281a:	686c      	ldr	r4, [r5, #4]
 800281c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800281e:	07db      	lsls	r3, r3, #31
 8002820:	d405      	bmi.n	800282e <_puts_r+0x36>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	0598      	lsls	r0, r3, #22
 8002826:	d402      	bmi.n	800282e <_puts_r+0x36>
 8002828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800282a:	f000 fad3 	bl	8002dd4 <__retarget_lock_acquire_recursive>
 800282e:	89a3      	ldrh	r3, [r4, #12]
 8002830:	0719      	lsls	r1, r3, #28
 8002832:	d51d      	bpl.n	8002870 <_puts_r+0x78>
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	b1db      	cbz	r3, 8002870 <_puts_r+0x78>
 8002838:	3e01      	subs	r6, #1
 800283a:	68a3      	ldr	r3, [r4, #8]
 800283c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002840:	3b01      	subs	r3, #1
 8002842:	60a3      	str	r3, [r4, #8]
 8002844:	bb39      	cbnz	r1, 8002896 <_puts_r+0x9e>
 8002846:	2b00      	cmp	r3, #0
 8002848:	da38      	bge.n	80028bc <_puts_r+0xc4>
 800284a:	4622      	mov	r2, r4
 800284c:	210a      	movs	r1, #10
 800284e:	4628      	mov	r0, r5
 8002850:	f000 f848 	bl	80028e4 <__swbuf_r>
 8002854:	3001      	adds	r0, #1
 8002856:	d011      	beq.n	800287c <_puts_r+0x84>
 8002858:	250a      	movs	r5, #10
 800285a:	e011      	b.n	8002880 <_puts_r+0x88>
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <_puts_r+0xd4>)
 800285e:	429c      	cmp	r4, r3
 8002860:	d101      	bne.n	8002866 <_puts_r+0x6e>
 8002862:	68ac      	ldr	r4, [r5, #8]
 8002864:	e7da      	b.n	800281c <_puts_r+0x24>
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <_puts_r+0xd8>)
 8002868:	429c      	cmp	r4, r3
 800286a:	bf08      	it	eq
 800286c:	68ec      	ldreq	r4, [r5, #12]
 800286e:	e7d5      	b.n	800281c <_puts_r+0x24>
 8002870:	4621      	mov	r1, r4
 8002872:	4628      	mov	r0, r5
 8002874:	f000 f888 	bl	8002988 <__swsetup_r>
 8002878:	2800      	cmp	r0, #0
 800287a:	d0dd      	beq.n	8002838 <_puts_r+0x40>
 800287c:	f04f 35ff 	mov.w	r5, #4294967295
 8002880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002882:	07da      	lsls	r2, r3, #31
 8002884:	d405      	bmi.n	8002892 <_puts_r+0x9a>
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	059b      	lsls	r3, r3, #22
 800288a:	d402      	bmi.n	8002892 <_puts_r+0x9a>
 800288c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800288e:	f000 faa2 	bl	8002dd6 <__retarget_lock_release_recursive>
 8002892:	4628      	mov	r0, r5
 8002894:	bd70      	pop	{r4, r5, r6, pc}
 8002896:	2b00      	cmp	r3, #0
 8002898:	da04      	bge.n	80028a4 <_puts_r+0xac>
 800289a:	69a2      	ldr	r2, [r4, #24]
 800289c:	429a      	cmp	r2, r3
 800289e:	dc06      	bgt.n	80028ae <_puts_r+0xb6>
 80028a0:	290a      	cmp	r1, #10
 80028a2:	d004      	beq.n	80028ae <_puts_r+0xb6>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	6022      	str	r2, [r4, #0]
 80028aa:	7019      	strb	r1, [r3, #0]
 80028ac:	e7c5      	b.n	800283a <_puts_r+0x42>
 80028ae:	4622      	mov	r2, r4
 80028b0:	4628      	mov	r0, r5
 80028b2:	f000 f817 	bl	80028e4 <__swbuf_r>
 80028b6:	3001      	adds	r0, #1
 80028b8:	d1bf      	bne.n	800283a <_puts_r+0x42>
 80028ba:	e7df      	b.n	800287c <_puts_r+0x84>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	250a      	movs	r5, #10
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	701d      	strb	r5, [r3, #0]
 80028c6:	e7db      	b.n	8002880 <_puts_r+0x88>
 80028c8:	0800347c 	.word	0x0800347c
 80028cc:	0800349c 	.word	0x0800349c
 80028d0:	0800345c 	.word	0x0800345c

080028d4 <puts>:
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <puts+0xc>)
 80028d6:	4601      	mov	r1, r0
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f7ff bf8d 	b.w	80027f8 <_puts_r>
 80028de:	bf00      	nop
 80028e0:	2000000c 	.word	0x2000000c

080028e4 <__swbuf_r>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	460e      	mov	r6, r1
 80028e8:	4614      	mov	r4, r2
 80028ea:	4605      	mov	r5, r0
 80028ec:	b118      	cbz	r0, 80028f6 <__swbuf_r+0x12>
 80028ee:	6983      	ldr	r3, [r0, #24]
 80028f0:	b90b      	cbnz	r3, 80028f6 <__swbuf_r+0x12>
 80028f2:	f000 f9d1 	bl	8002c98 <__sinit>
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <__swbuf_r+0x98>)
 80028f8:	429c      	cmp	r4, r3
 80028fa:	d12b      	bne.n	8002954 <__swbuf_r+0x70>
 80028fc:	686c      	ldr	r4, [r5, #4]
 80028fe:	69a3      	ldr	r3, [r4, #24]
 8002900:	60a3      	str	r3, [r4, #8]
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	071a      	lsls	r2, r3, #28
 8002906:	d52f      	bpl.n	8002968 <__swbuf_r+0x84>
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	b36b      	cbz	r3, 8002968 <__swbuf_r+0x84>
 800290c:	6923      	ldr	r3, [r4, #16]
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	1ac0      	subs	r0, r0, r3
 8002912:	6963      	ldr	r3, [r4, #20]
 8002914:	b2f6      	uxtb	r6, r6
 8002916:	4283      	cmp	r3, r0
 8002918:	4637      	mov	r7, r6
 800291a:	dc04      	bgt.n	8002926 <__swbuf_r+0x42>
 800291c:	4621      	mov	r1, r4
 800291e:	4628      	mov	r0, r5
 8002920:	f000 f926 	bl	8002b70 <_fflush_r>
 8002924:	bb30      	cbnz	r0, 8002974 <__swbuf_r+0x90>
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	3b01      	subs	r3, #1
 800292a:	60a3      	str	r3, [r4, #8]
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	6022      	str	r2, [r4, #0]
 8002932:	701e      	strb	r6, [r3, #0]
 8002934:	6963      	ldr	r3, [r4, #20]
 8002936:	3001      	adds	r0, #1
 8002938:	4283      	cmp	r3, r0
 800293a:	d004      	beq.n	8002946 <__swbuf_r+0x62>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	07db      	lsls	r3, r3, #31
 8002940:	d506      	bpl.n	8002950 <__swbuf_r+0x6c>
 8002942:	2e0a      	cmp	r6, #10
 8002944:	d104      	bne.n	8002950 <__swbuf_r+0x6c>
 8002946:	4621      	mov	r1, r4
 8002948:	4628      	mov	r0, r5
 800294a:	f000 f911 	bl	8002b70 <_fflush_r>
 800294e:	b988      	cbnz	r0, 8002974 <__swbuf_r+0x90>
 8002950:	4638      	mov	r0, r7
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <__swbuf_r+0x9c>)
 8002956:	429c      	cmp	r4, r3
 8002958:	d101      	bne.n	800295e <__swbuf_r+0x7a>
 800295a:	68ac      	ldr	r4, [r5, #8]
 800295c:	e7cf      	b.n	80028fe <__swbuf_r+0x1a>
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <__swbuf_r+0xa0>)
 8002960:	429c      	cmp	r4, r3
 8002962:	bf08      	it	eq
 8002964:	68ec      	ldreq	r4, [r5, #12]
 8002966:	e7ca      	b.n	80028fe <__swbuf_r+0x1a>
 8002968:	4621      	mov	r1, r4
 800296a:	4628      	mov	r0, r5
 800296c:	f000 f80c 	bl	8002988 <__swsetup_r>
 8002970:	2800      	cmp	r0, #0
 8002972:	d0cb      	beq.n	800290c <__swbuf_r+0x28>
 8002974:	f04f 37ff 	mov.w	r7, #4294967295
 8002978:	e7ea      	b.n	8002950 <__swbuf_r+0x6c>
 800297a:	bf00      	nop
 800297c:	0800347c 	.word	0x0800347c
 8002980:	0800349c 	.word	0x0800349c
 8002984:	0800345c 	.word	0x0800345c

08002988 <__swsetup_r>:
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <__swsetup_r+0xcc>)
 800298a:	b570      	push	{r4, r5, r6, lr}
 800298c:	681d      	ldr	r5, [r3, #0]
 800298e:	4606      	mov	r6, r0
 8002990:	460c      	mov	r4, r1
 8002992:	b125      	cbz	r5, 800299e <__swsetup_r+0x16>
 8002994:	69ab      	ldr	r3, [r5, #24]
 8002996:	b913      	cbnz	r3, 800299e <__swsetup_r+0x16>
 8002998:	4628      	mov	r0, r5
 800299a:	f000 f97d 	bl	8002c98 <__sinit>
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <__swsetup_r+0xd0>)
 80029a0:	429c      	cmp	r4, r3
 80029a2:	d10f      	bne.n	80029c4 <__swsetup_r+0x3c>
 80029a4:	686c      	ldr	r4, [r5, #4]
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029ac:	0719      	lsls	r1, r3, #28
 80029ae:	d42c      	bmi.n	8002a0a <__swsetup_r+0x82>
 80029b0:	06dd      	lsls	r5, r3, #27
 80029b2:	d411      	bmi.n	80029d8 <__swsetup_r+0x50>
 80029b4:	2309      	movs	r3, #9
 80029b6:	6033      	str	r3, [r6, #0]
 80029b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029bc:	81a3      	strh	r3, [r4, #12]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	e03e      	b.n	8002a42 <__swsetup_r+0xba>
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <__swsetup_r+0xd4>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	d101      	bne.n	80029ce <__swsetup_r+0x46>
 80029ca:	68ac      	ldr	r4, [r5, #8]
 80029cc:	e7eb      	b.n	80029a6 <__swsetup_r+0x1e>
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <__swsetup_r+0xd8>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	bf08      	it	eq
 80029d4:	68ec      	ldreq	r4, [r5, #12]
 80029d6:	e7e6      	b.n	80029a6 <__swsetup_r+0x1e>
 80029d8:	0758      	lsls	r0, r3, #29
 80029da:	d512      	bpl.n	8002a02 <__swsetup_r+0x7a>
 80029dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029de:	b141      	cbz	r1, 80029f2 <__swsetup_r+0x6a>
 80029e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d002      	beq.n	80029ee <__swsetup_r+0x66>
 80029e8:	4630      	mov	r0, r6
 80029ea:	f000 fa5b 	bl	8002ea4 <_free_r>
 80029ee:	2300      	movs	r3, #0
 80029f0:	6363      	str	r3, [r4, #52]	; 0x34
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029f8:	81a3      	strh	r3, [r4, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	6063      	str	r3, [r4, #4]
 80029fe:	6923      	ldr	r3, [r4, #16]
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	81a3      	strh	r3, [r4, #12]
 8002a0a:	6923      	ldr	r3, [r4, #16]
 8002a0c:	b94b      	cbnz	r3, 8002a22 <__swsetup_r+0x9a>
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d003      	beq.n	8002a22 <__swsetup_r+0x9a>
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f000 fa01 	bl	8002e24 <__smakebuf_r>
 8002a22:	89a0      	ldrh	r0, [r4, #12]
 8002a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a28:	f010 0301 	ands.w	r3, r0, #1
 8002a2c:	d00a      	beq.n	8002a44 <__swsetup_r+0xbc>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60a3      	str	r3, [r4, #8]
 8002a32:	6963      	ldr	r3, [r4, #20]
 8002a34:	425b      	negs	r3, r3
 8002a36:	61a3      	str	r3, [r4, #24]
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	b943      	cbnz	r3, 8002a4e <__swsetup_r+0xc6>
 8002a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a40:	d1ba      	bne.n	80029b8 <__swsetup_r+0x30>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	0781      	lsls	r1, r0, #30
 8002a46:	bf58      	it	pl
 8002a48:	6963      	ldrpl	r3, [r4, #20]
 8002a4a:	60a3      	str	r3, [r4, #8]
 8002a4c:	e7f4      	b.n	8002a38 <__swsetup_r+0xb0>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e7f7      	b.n	8002a42 <__swsetup_r+0xba>
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	0800347c 	.word	0x0800347c
 8002a5c:	0800349c 	.word	0x0800349c
 8002a60:	0800345c 	.word	0x0800345c

08002a64 <__sflush_r>:
 8002a64:	898a      	ldrh	r2, [r1, #12]
 8002a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	0710      	lsls	r0, r2, #28
 8002a6e:	460c      	mov	r4, r1
 8002a70:	d458      	bmi.n	8002b24 <__sflush_r+0xc0>
 8002a72:	684b      	ldr	r3, [r1, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dc05      	bgt.n	8002a84 <__sflush_r+0x20>
 8002a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dc02      	bgt.n	8002a84 <__sflush_r+0x20>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d0f9      	beq.n	8002a7e <__sflush_r+0x1a>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a90:	682f      	ldr	r7, [r5, #0]
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	d032      	beq.n	8002afc <__sflush_r+0x98>
 8002a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	075a      	lsls	r2, r3, #29
 8002a9c:	d505      	bpl.n	8002aaa <__sflush_r+0x46>
 8002a9e:	6863      	ldr	r3, [r4, #4]
 8002aa0:	1ac0      	subs	r0, r0, r3
 8002aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa4:	b10b      	cbz	r3, 8002aaa <__sflush_r+0x46>
 8002aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aa8:	1ac0      	subs	r0, r0, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4602      	mov	r2, r0
 8002aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab0:	6a21      	ldr	r1, [r4, #32]
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	47b0      	blx	r6
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	d106      	bne.n	8002aca <__sflush_r+0x66>
 8002abc:	6829      	ldr	r1, [r5, #0]
 8002abe:	291d      	cmp	r1, #29
 8002ac0:	d82c      	bhi.n	8002b1c <__sflush_r+0xb8>
 8002ac2:	4a2a      	ldr	r2, [pc, #168]	; (8002b6c <__sflush_r+0x108>)
 8002ac4:	40ca      	lsrs	r2, r1
 8002ac6:	07d6      	lsls	r6, r2, #31
 8002ac8:	d528      	bpl.n	8002b1c <__sflush_r+0xb8>
 8002aca:	2200      	movs	r2, #0
 8002acc:	6062      	str	r2, [r4, #4]
 8002ace:	04d9      	lsls	r1, r3, #19
 8002ad0:	6922      	ldr	r2, [r4, #16]
 8002ad2:	6022      	str	r2, [r4, #0]
 8002ad4:	d504      	bpl.n	8002ae0 <__sflush_r+0x7c>
 8002ad6:	1c42      	adds	r2, r0, #1
 8002ad8:	d101      	bne.n	8002ade <__sflush_r+0x7a>
 8002ada:	682b      	ldr	r3, [r5, #0]
 8002adc:	b903      	cbnz	r3, 8002ae0 <__sflush_r+0x7c>
 8002ade:	6560      	str	r0, [r4, #84]	; 0x54
 8002ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ae2:	602f      	str	r7, [r5, #0]
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d0ca      	beq.n	8002a7e <__sflush_r+0x1a>
 8002ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aec:	4299      	cmp	r1, r3
 8002aee:	d002      	beq.n	8002af6 <__sflush_r+0x92>
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 f9d7 	bl	8002ea4 <_free_r>
 8002af6:	2000      	movs	r0, #0
 8002af8:	6360      	str	r0, [r4, #52]	; 0x34
 8002afa:	e7c1      	b.n	8002a80 <__sflush_r+0x1c>
 8002afc:	6a21      	ldr	r1, [r4, #32]
 8002afe:	2301      	movs	r3, #1
 8002b00:	4628      	mov	r0, r5
 8002b02:	47b0      	blx	r6
 8002b04:	1c41      	adds	r1, r0, #1
 8002b06:	d1c7      	bne.n	8002a98 <__sflush_r+0x34>
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0c4      	beq.n	8002a98 <__sflush_r+0x34>
 8002b0e:	2b1d      	cmp	r3, #29
 8002b10:	d001      	beq.n	8002b16 <__sflush_r+0xb2>
 8002b12:	2b16      	cmp	r3, #22
 8002b14:	d101      	bne.n	8002b1a <__sflush_r+0xb6>
 8002b16:	602f      	str	r7, [r5, #0]
 8002b18:	e7b1      	b.n	8002a7e <__sflush_r+0x1a>
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	e7ad      	b.n	8002a80 <__sflush_r+0x1c>
 8002b24:	690f      	ldr	r7, [r1, #16]
 8002b26:	2f00      	cmp	r7, #0
 8002b28:	d0a9      	beq.n	8002a7e <__sflush_r+0x1a>
 8002b2a:	0793      	lsls	r3, r2, #30
 8002b2c:	680e      	ldr	r6, [r1, #0]
 8002b2e:	bf08      	it	eq
 8002b30:	694b      	ldreq	r3, [r1, #20]
 8002b32:	600f      	str	r7, [r1, #0]
 8002b34:	bf18      	it	ne
 8002b36:	2300      	movne	r3, #0
 8002b38:	eba6 0807 	sub.w	r8, r6, r7
 8002b3c:	608b      	str	r3, [r1, #8]
 8002b3e:	f1b8 0f00 	cmp.w	r8, #0
 8002b42:	dd9c      	ble.n	8002a7e <__sflush_r+0x1a>
 8002b44:	6a21      	ldr	r1, [r4, #32]
 8002b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b48:	4643      	mov	r3, r8
 8002b4a:	463a      	mov	r2, r7
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	47b0      	blx	r6
 8002b50:	2800      	cmp	r0, #0
 8002b52:	dc06      	bgt.n	8002b62 <__sflush_r+0xfe>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e78e      	b.n	8002a80 <__sflush_r+0x1c>
 8002b62:	4407      	add	r7, r0
 8002b64:	eba8 0800 	sub.w	r8, r8, r0
 8002b68:	e7e9      	b.n	8002b3e <__sflush_r+0xda>
 8002b6a:	bf00      	nop
 8002b6c:	20400001 	.word	0x20400001

08002b70 <_fflush_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	690b      	ldr	r3, [r1, #16]
 8002b74:	4605      	mov	r5, r0
 8002b76:	460c      	mov	r4, r1
 8002b78:	b913      	cbnz	r3, 8002b80 <_fflush_r+0x10>
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	b118      	cbz	r0, 8002b8a <_fflush_r+0x1a>
 8002b82:	6983      	ldr	r3, [r0, #24]
 8002b84:	b90b      	cbnz	r3, 8002b8a <_fflush_r+0x1a>
 8002b86:	f000 f887 	bl	8002c98 <__sinit>
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <_fflush_r+0x6c>)
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d11b      	bne.n	8002bc8 <_fflush_r+0x58>
 8002b90:	686c      	ldr	r4, [r5, #4]
 8002b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ef      	beq.n	8002b7a <_fflush_r+0xa>
 8002b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b9c:	07d0      	lsls	r0, r2, #31
 8002b9e:	d404      	bmi.n	8002baa <_fflush_r+0x3a>
 8002ba0:	0599      	lsls	r1, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_fflush_r+0x3a>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ba6:	f000 f915 	bl	8002dd4 <__retarget_lock_acquire_recursive>
 8002baa:	4628      	mov	r0, r5
 8002bac:	4621      	mov	r1, r4
 8002bae:	f7ff ff59 	bl	8002a64 <__sflush_r>
 8002bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bb4:	07da      	lsls	r2, r3, #31
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	d4e0      	bmi.n	8002b7c <_fflush_r+0xc>
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	059b      	lsls	r3, r3, #22
 8002bbe:	d4dd      	bmi.n	8002b7c <_fflush_r+0xc>
 8002bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc2:	f000 f908 	bl	8002dd6 <__retarget_lock_release_recursive>
 8002bc6:	e7d9      	b.n	8002b7c <_fflush_r+0xc>
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <_fflush_r+0x70>)
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d101      	bne.n	8002bd2 <_fflush_r+0x62>
 8002bce:	68ac      	ldr	r4, [r5, #8]
 8002bd0:	e7df      	b.n	8002b92 <_fflush_r+0x22>
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <_fflush_r+0x74>)
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	bf08      	it	eq
 8002bd8:	68ec      	ldreq	r4, [r5, #12]
 8002bda:	e7da      	b.n	8002b92 <_fflush_r+0x22>
 8002bdc:	0800347c 	.word	0x0800347c
 8002be0:	0800349c 	.word	0x0800349c
 8002be4:	0800345c 	.word	0x0800345c

08002be8 <std>:
 8002be8:	2300      	movs	r3, #0
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	e9c0 3300 	strd	r3, r3, [r0]
 8002bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bf6:	6083      	str	r3, [r0, #8]
 8002bf8:	8181      	strh	r1, [r0, #12]
 8002bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8002bfc:	81c2      	strh	r2, [r0, #14]
 8002bfe:	6183      	str	r3, [r0, #24]
 8002c00:	4619      	mov	r1, r3
 8002c02:	2208      	movs	r2, #8
 8002c04:	305c      	adds	r0, #92	; 0x5c
 8002c06:	f7ff fdef 	bl	80027e8 <memset>
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <std+0x38>)
 8002c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <std+0x3c>)
 8002c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <std+0x40>)
 8002c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <std+0x44>)
 8002c18:	6224      	str	r4, [r4, #32]
 8002c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	bf00      	nop
 8002c20:	08003085 	.word	0x08003085
 8002c24:	080030a7 	.word	0x080030a7
 8002c28:	080030df 	.word	0x080030df
 8002c2c:	08003103 	.word	0x08003103

08002c30 <_cleanup_r>:
 8002c30:	4901      	ldr	r1, [pc, #4]	; (8002c38 <_cleanup_r+0x8>)
 8002c32:	f000 b8af 	b.w	8002d94 <_fwalk_reent>
 8002c36:	bf00      	nop
 8002c38:	08002b71 	.word	0x08002b71

08002c3c <__sfmoreglue>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	2268      	movs	r2, #104	; 0x68
 8002c40:	1e4d      	subs	r5, r1, #1
 8002c42:	4355      	muls	r5, r2
 8002c44:	460e      	mov	r6, r1
 8002c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c4a:	f000 f997 	bl	8002f7c <_malloc_r>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	b140      	cbz	r0, 8002c64 <__sfmoreglue+0x28>
 8002c52:	2100      	movs	r1, #0
 8002c54:	e9c0 1600 	strd	r1, r6, [r0]
 8002c58:	300c      	adds	r0, #12
 8002c5a:	60a0      	str	r0, [r4, #8]
 8002c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c60:	f7ff fdc2 	bl	80027e8 <memset>
 8002c64:	4620      	mov	r0, r4
 8002c66:	bd70      	pop	{r4, r5, r6, pc}

08002c68 <__sfp_lock_acquire>:
 8002c68:	4801      	ldr	r0, [pc, #4]	; (8002c70 <__sfp_lock_acquire+0x8>)
 8002c6a:	f000 b8b3 	b.w	8002dd4 <__retarget_lock_acquire_recursive>
 8002c6e:	bf00      	nop
 8002c70:	200001d5 	.word	0x200001d5

08002c74 <__sfp_lock_release>:
 8002c74:	4801      	ldr	r0, [pc, #4]	; (8002c7c <__sfp_lock_release+0x8>)
 8002c76:	f000 b8ae 	b.w	8002dd6 <__retarget_lock_release_recursive>
 8002c7a:	bf00      	nop
 8002c7c:	200001d5 	.word	0x200001d5

08002c80 <__sinit_lock_acquire>:
 8002c80:	4801      	ldr	r0, [pc, #4]	; (8002c88 <__sinit_lock_acquire+0x8>)
 8002c82:	f000 b8a7 	b.w	8002dd4 <__retarget_lock_acquire_recursive>
 8002c86:	bf00      	nop
 8002c88:	200001d6 	.word	0x200001d6

08002c8c <__sinit_lock_release>:
 8002c8c:	4801      	ldr	r0, [pc, #4]	; (8002c94 <__sinit_lock_release+0x8>)
 8002c8e:	f000 b8a2 	b.w	8002dd6 <__retarget_lock_release_recursive>
 8002c92:	bf00      	nop
 8002c94:	200001d6 	.word	0x200001d6

08002c98 <__sinit>:
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	f7ff fff0 	bl	8002c80 <__sinit_lock_acquire>
 8002ca0:	69a3      	ldr	r3, [r4, #24]
 8002ca2:	b11b      	cbz	r3, 8002cac <__sinit+0x14>
 8002ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca8:	f7ff bff0 	b.w	8002c8c <__sinit_lock_release>
 8002cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <__sinit+0x68>)
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <__sinit+0x6c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	bf04      	itt	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	61a3      	streq	r3, [r4, #24]
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f000 f820 	bl	8002d08 <__sfp>
 8002cc8:	6060      	str	r0, [r4, #4]
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f000 f81c 	bl	8002d08 <__sfp>
 8002cd0:	60a0      	str	r0, [r4, #8]
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 f818 	bl	8002d08 <__sfp>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60e0      	str	r0, [r4, #12]
 8002cdc:	2104      	movs	r1, #4
 8002cde:	6860      	ldr	r0, [r4, #4]
 8002ce0:	f7ff ff82 	bl	8002be8 <std>
 8002ce4:	68a0      	ldr	r0, [r4, #8]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2109      	movs	r1, #9
 8002cea:	f7ff ff7d 	bl	8002be8 <std>
 8002cee:	68e0      	ldr	r0, [r4, #12]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	2112      	movs	r1, #18
 8002cf4:	f7ff ff78 	bl	8002be8 <std>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61a3      	str	r3, [r4, #24]
 8002cfc:	e7d2      	b.n	8002ca4 <__sinit+0xc>
 8002cfe:	bf00      	nop
 8002d00:	08003458 	.word	0x08003458
 8002d04:	08002c31 	.word	0x08002c31

08002d08 <__sfp>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	4607      	mov	r7, r0
 8002d0c:	f7ff ffac 	bl	8002c68 <__sfp_lock_acquire>
 8002d10:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <__sfp+0x84>)
 8002d12:	681e      	ldr	r6, [r3, #0]
 8002d14:	69b3      	ldr	r3, [r6, #24]
 8002d16:	b913      	cbnz	r3, 8002d1e <__sfp+0x16>
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f7ff ffbd 	bl	8002c98 <__sinit>
 8002d1e:	3648      	adds	r6, #72	; 0x48
 8002d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	d503      	bpl.n	8002d30 <__sfp+0x28>
 8002d28:	6833      	ldr	r3, [r6, #0]
 8002d2a:	b30b      	cbz	r3, 8002d70 <__sfp+0x68>
 8002d2c:	6836      	ldr	r6, [r6, #0]
 8002d2e:	e7f7      	b.n	8002d20 <__sfp+0x18>
 8002d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d34:	b9d5      	cbnz	r5, 8002d6c <__sfp+0x64>
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <__sfp+0x88>)
 8002d38:	60e3      	str	r3, [r4, #12]
 8002d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8002d40:	f000 f847 	bl	8002dd2 <__retarget_lock_init_recursive>
 8002d44:	f7ff ff96 	bl	8002c74 <__sfp_lock_release>
 8002d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d50:	6025      	str	r5, [r4, #0]
 8002d52:	61a5      	str	r5, [r4, #24]
 8002d54:	2208      	movs	r2, #8
 8002d56:	4629      	mov	r1, r5
 8002d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d5c:	f7ff fd44 	bl	80027e8 <memset>
 8002d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d68:	4620      	mov	r0, r4
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d6c:	3468      	adds	r4, #104	; 0x68
 8002d6e:	e7d9      	b.n	8002d24 <__sfp+0x1c>
 8002d70:	2104      	movs	r1, #4
 8002d72:	4638      	mov	r0, r7
 8002d74:	f7ff ff62 	bl	8002c3c <__sfmoreglue>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	6030      	str	r0, [r6, #0]
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d1d5      	bne.n	8002d2c <__sfp+0x24>
 8002d80:	f7ff ff78 	bl	8002c74 <__sfp_lock_release>
 8002d84:	230c      	movs	r3, #12
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	e7ee      	b.n	8002d68 <__sfp+0x60>
 8002d8a:	bf00      	nop
 8002d8c:	08003458 	.word	0x08003458
 8002d90:	ffff0001 	.word	0xffff0001

08002d94 <_fwalk_reent>:
 8002d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d98:	4606      	mov	r6, r0
 8002d9a:	4688      	mov	r8, r1
 8002d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002da0:	2700      	movs	r7, #0
 8002da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002da6:	f1b9 0901 	subs.w	r9, r9, #1
 8002daa:	d505      	bpl.n	8002db8 <_fwalk_reent+0x24>
 8002dac:	6824      	ldr	r4, [r4, #0]
 8002dae:	2c00      	cmp	r4, #0
 8002db0:	d1f7      	bne.n	8002da2 <_fwalk_reent+0xe>
 8002db2:	4638      	mov	r0, r7
 8002db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002db8:	89ab      	ldrh	r3, [r5, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d907      	bls.n	8002dce <_fwalk_reent+0x3a>
 8002dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	d003      	beq.n	8002dce <_fwalk_reent+0x3a>
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	4630      	mov	r0, r6
 8002dca:	47c0      	blx	r8
 8002dcc:	4307      	orrs	r7, r0
 8002dce:	3568      	adds	r5, #104	; 0x68
 8002dd0:	e7e9      	b.n	8002da6 <_fwalk_reent+0x12>

08002dd2 <__retarget_lock_init_recursive>:
 8002dd2:	4770      	bx	lr

08002dd4 <__retarget_lock_acquire_recursive>:
 8002dd4:	4770      	bx	lr

08002dd6 <__retarget_lock_release_recursive>:
 8002dd6:	4770      	bx	lr

08002dd8 <__swhatbuf_r>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	460e      	mov	r6, r1
 8002ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de0:	2900      	cmp	r1, #0
 8002de2:	b096      	sub	sp, #88	; 0x58
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	da08      	bge.n	8002dfc <__swhatbuf_r+0x24>
 8002dea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	602a      	str	r2, [r5, #0]
 8002df2:	061a      	lsls	r2, r3, #24
 8002df4:	d410      	bmi.n	8002e18 <__swhatbuf_r+0x40>
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	e00e      	b.n	8002e1a <__swhatbuf_r+0x42>
 8002dfc:	466a      	mov	r2, sp
 8002dfe:	f000 f9a7 	bl	8003150 <_fstat_r>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	dbf1      	blt.n	8002dea <__swhatbuf_r+0x12>
 8002e06:	9a01      	ldr	r2, [sp, #4]
 8002e08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e10:	425a      	negs	r2, r3
 8002e12:	415a      	adcs	r2, r3
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	e7ee      	b.n	8002df6 <__swhatbuf_r+0x1e>
 8002e18:	2340      	movs	r3, #64	; 0x40
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	b016      	add	sp, #88	; 0x58
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e24 <__smakebuf_r>:
 8002e24:	898b      	ldrh	r3, [r1, #12]
 8002e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e28:	079d      	lsls	r5, r3, #30
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	d507      	bpl.n	8002e40 <__smakebuf_r+0x1c>
 8002e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	6123      	str	r3, [r4, #16]
 8002e38:	2301      	movs	r3, #1
 8002e3a:	6163      	str	r3, [r4, #20]
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	ab01      	add	r3, sp, #4
 8002e42:	466a      	mov	r2, sp
 8002e44:	f7ff ffc8 	bl	8002dd8 <__swhatbuf_r>
 8002e48:	9900      	ldr	r1, [sp, #0]
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f000 f895 	bl	8002f7c <_malloc_r>
 8002e52:	b948      	cbnz	r0, 8002e68 <__smakebuf_r+0x44>
 8002e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e58:	059a      	lsls	r2, r3, #22
 8002e5a:	d4ef      	bmi.n	8002e3c <__smakebuf_r+0x18>
 8002e5c:	f023 0303 	bic.w	r3, r3, #3
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	81a3      	strh	r3, [r4, #12]
 8002e66:	e7e3      	b.n	8002e30 <__smakebuf_r+0xc>
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <__smakebuf_r+0x7c>)
 8002e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	6020      	str	r0, [r4, #0]
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	81a3      	strh	r3, [r4, #12]
 8002e76:	9b00      	ldr	r3, [sp, #0]
 8002e78:	6163      	str	r3, [r4, #20]
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	6120      	str	r0, [r4, #16]
 8002e7e:	b15b      	cbz	r3, 8002e98 <__smakebuf_r+0x74>
 8002e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e84:	4630      	mov	r0, r6
 8002e86:	f000 f975 	bl	8003174 <_isatty_r>
 8002e8a:	b128      	cbz	r0, 8002e98 <__smakebuf_r+0x74>
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	81a3      	strh	r3, [r4, #12]
 8002e98:	89a0      	ldrh	r0, [r4, #12]
 8002e9a:	4305      	orrs	r5, r0
 8002e9c:	81a5      	strh	r5, [r4, #12]
 8002e9e:	e7cd      	b.n	8002e3c <__smakebuf_r+0x18>
 8002ea0:	08002c31 	.word	0x08002c31

08002ea4 <_free_r>:
 8002ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	d044      	beq.n	8002f34 <_free_r+0x90>
 8002eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eae:	9001      	str	r0, [sp, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8002eb6:	bfb8      	it	lt
 8002eb8:	18e4      	addlt	r4, r4, r3
 8002eba:	f000 f97d 	bl	80031b8 <__malloc_lock>
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <_free_r+0x94>)
 8002ec0:	9801      	ldr	r0, [sp, #4]
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	b933      	cbnz	r3, 8002ed4 <_free_r+0x30>
 8002ec6:	6063      	str	r3, [r4, #4]
 8002ec8:	6014      	str	r4, [r2, #0]
 8002eca:	b003      	add	sp, #12
 8002ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed0:	f000 b978 	b.w	80031c4 <__malloc_unlock>
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	d908      	bls.n	8002eea <_free_r+0x46>
 8002ed8:	6825      	ldr	r5, [r4, #0]
 8002eda:	1961      	adds	r1, r4, r5
 8002edc:	428b      	cmp	r3, r1
 8002ede:	bf01      	itttt	eq
 8002ee0:	6819      	ldreq	r1, [r3, #0]
 8002ee2:	685b      	ldreq	r3, [r3, #4]
 8002ee4:	1949      	addeq	r1, r1, r5
 8002ee6:	6021      	streq	r1, [r4, #0]
 8002ee8:	e7ed      	b.n	8002ec6 <_free_r+0x22>
 8002eea:	461a      	mov	r2, r3
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	b10b      	cbz	r3, 8002ef4 <_free_r+0x50>
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d9fa      	bls.n	8002eea <_free_r+0x46>
 8002ef4:	6811      	ldr	r1, [r2, #0]
 8002ef6:	1855      	adds	r5, r2, r1
 8002ef8:	42a5      	cmp	r5, r4
 8002efa:	d10b      	bne.n	8002f14 <_free_r+0x70>
 8002efc:	6824      	ldr	r4, [r4, #0]
 8002efe:	4421      	add	r1, r4
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	6011      	str	r1, [r2, #0]
 8002f06:	d1e0      	bne.n	8002eca <_free_r+0x26>
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	6053      	str	r3, [r2, #4]
 8002f0e:	4421      	add	r1, r4
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	e7da      	b.n	8002eca <_free_r+0x26>
 8002f14:	d902      	bls.n	8002f1c <_free_r+0x78>
 8002f16:	230c      	movs	r3, #12
 8002f18:	6003      	str	r3, [r0, #0]
 8002f1a:	e7d6      	b.n	8002eca <_free_r+0x26>
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1961      	adds	r1, r4, r5
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf04      	itt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	bf04      	itt	eq
 8002f2c:	1949      	addeq	r1, r1, r5
 8002f2e:	6021      	streq	r1, [r4, #0]
 8002f30:	6054      	str	r4, [r2, #4]
 8002f32:	e7ca      	b.n	8002eca <_free_r+0x26>
 8002f34:	b003      	add	sp, #12
 8002f36:	bd30      	pop	{r4, r5, pc}
 8002f38:	200001d8 	.word	0x200001d8

08002f3c <sbrk_aligned>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4e0e      	ldr	r6, [pc, #56]	; (8002f78 <sbrk_aligned+0x3c>)
 8002f40:	460c      	mov	r4, r1
 8002f42:	6831      	ldr	r1, [r6, #0]
 8002f44:	4605      	mov	r5, r0
 8002f46:	b911      	cbnz	r1, 8002f4e <sbrk_aligned+0x12>
 8002f48:	f000 f88c 	bl	8003064 <_sbrk_r>
 8002f4c:	6030      	str	r0, [r6, #0]
 8002f4e:	4621      	mov	r1, r4
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 f887 	bl	8003064 <_sbrk_r>
 8002f56:	1c43      	adds	r3, r0, #1
 8002f58:	d00a      	beq.n	8002f70 <sbrk_aligned+0x34>
 8002f5a:	1cc4      	adds	r4, r0, #3
 8002f5c:	f024 0403 	bic.w	r4, r4, #3
 8002f60:	42a0      	cmp	r0, r4
 8002f62:	d007      	beq.n	8002f74 <sbrk_aligned+0x38>
 8002f64:	1a21      	subs	r1, r4, r0
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 f87c 	bl	8003064 <_sbrk_r>
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d101      	bne.n	8002f74 <sbrk_aligned+0x38>
 8002f70:	f04f 34ff 	mov.w	r4, #4294967295
 8002f74:	4620      	mov	r0, r4
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	200001dc 	.word	0x200001dc

08002f7c <_malloc_r>:
 8002f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	1ccd      	adds	r5, r1, #3
 8002f82:	f025 0503 	bic.w	r5, r5, #3
 8002f86:	3508      	adds	r5, #8
 8002f88:	2d0c      	cmp	r5, #12
 8002f8a:	bf38      	it	cc
 8002f8c:	250c      	movcc	r5, #12
 8002f8e:	2d00      	cmp	r5, #0
 8002f90:	4607      	mov	r7, r0
 8002f92:	db01      	blt.n	8002f98 <_malloc_r+0x1c>
 8002f94:	42a9      	cmp	r1, r5
 8002f96:	d905      	bls.n	8002fa4 <_malloc_r+0x28>
 8002f98:	230c      	movs	r3, #12
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa4:	4e2e      	ldr	r6, [pc, #184]	; (8003060 <_malloc_r+0xe4>)
 8002fa6:	f000 f907 	bl	80031b8 <__malloc_lock>
 8002faa:	6833      	ldr	r3, [r6, #0]
 8002fac:	461c      	mov	r4, r3
 8002fae:	bb34      	cbnz	r4, 8002ffe <_malloc_r+0x82>
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f7ff ffc2 	bl	8002f3c <sbrk_aligned>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	4604      	mov	r4, r0
 8002fbc:	d14d      	bne.n	800305a <_malloc_r+0xde>
 8002fbe:	6834      	ldr	r4, [r6, #0]
 8002fc0:	4626      	mov	r6, r4
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	d140      	bne.n	8003048 <_malloc_r+0xcc>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	4631      	mov	r1, r6
 8002fca:	4638      	mov	r0, r7
 8002fcc:	eb04 0803 	add.w	r8, r4, r3
 8002fd0:	f000 f848 	bl	8003064 <_sbrk_r>
 8002fd4:	4580      	cmp	r8, r0
 8002fd6:	d13a      	bne.n	800304e <_malloc_r+0xd2>
 8002fd8:	6821      	ldr	r1, [r4, #0]
 8002fda:	3503      	adds	r5, #3
 8002fdc:	1a6d      	subs	r5, r5, r1
 8002fde:	f025 0503 	bic.w	r5, r5, #3
 8002fe2:	3508      	adds	r5, #8
 8002fe4:	2d0c      	cmp	r5, #12
 8002fe6:	bf38      	it	cc
 8002fe8:	250c      	movcc	r5, #12
 8002fea:	4629      	mov	r1, r5
 8002fec:	4638      	mov	r0, r7
 8002fee:	f7ff ffa5 	bl	8002f3c <sbrk_aligned>
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d02b      	beq.n	800304e <_malloc_r+0xd2>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	442b      	add	r3, r5
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	e00e      	b.n	800301c <_malloc_r+0xa0>
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	1b52      	subs	r2, r2, r5
 8003002:	d41e      	bmi.n	8003042 <_malloc_r+0xc6>
 8003004:	2a0b      	cmp	r2, #11
 8003006:	d916      	bls.n	8003036 <_malloc_r+0xba>
 8003008:	1961      	adds	r1, r4, r5
 800300a:	42a3      	cmp	r3, r4
 800300c:	6025      	str	r5, [r4, #0]
 800300e:	bf18      	it	ne
 8003010:	6059      	strne	r1, [r3, #4]
 8003012:	6863      	ldr	r3, [r4, #4]
 8003014:	bf08      	it	eq
 8003016:	6031      	streq	r1, [r6, #0]
 8003018:	5162      	str	r2, [r4, r5]
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	4638      	mov	r0, r7
 800301e:	f104 060b 	add.w	r6, r4, #11
 8003022:	f000 f8cf 	bl	80031c4 <__malloc_unlock>
 8003026:	f026 0607 	bic.w	r6, r6, #7
 800302a:	1d23      	adds	r3, r4, #4
 800302c:	1af2      	subs	r2, r6, r3
 800302e:	d0b6      	beq.n	8002f9e <_malloc_r+0x22>
 8003030:	1b9b      	subs	r3, r3, r6
 8003032:	50a3      	str	r3, [r4, r2]
 8003034:	e7b3      	b.n	8002f9e <_malloc_r+0x22>
 8003036:	6862      	ldr	r2, [r4, #4]
 8003038:	42a3      	cmp	r3, r4
 800303a:	bf0c      	ite	eq
 800303c:	6032      	streq	r2, [r6, #0]
 800303e:	605a      	strne	r2, [r3, #4]
 8003040:	e7ec      	b.n	800301c <_malloc_r+0xa0>
 8003042:	4623      	mov	r3, r4
 8003044:	6864      	ldr	r4, [r4, #4]
 8003046:	e7b2      	b.n	8002fae <_malloc_r+0x32>
 8003048:	4634      	mov	r4, r6
 800304a:	6876      	ldr	r6, [r6, #4]
 800304c:	e7b9      	b.n	8002fc2 <_malloc_r+0x46>
 800304e:	230c      	movs	r3, #12
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4638      	mov	r0, r7
 8003054:	f000 f8b6 	bl	80031c4 <__malloc_unlock>
 8003058:	e7a1      	b.n	8002f9e <_malloc_r+0x22>
 800305a:	6025      	str	r5, [r4, #0]
 800305c:	e7de      	b.n	800301c <_malloc_r+0xa0>
 800305e:	bf00      	nop
 8003060:	200001d8 	.word	0x200001d8

08003064 <_sbrk_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d06      	ldr	r5, [pc, #24]	; (8003080 <_sbrk_r+0x1c>)
 8003068:	2300      	movs	r3, #0
 800306a:	4604      	mov	r4, r0
 800306c:	4608      	mov	r0, r1
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	f7fd fd76 	bl	8000b60 <_sbrk>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_sbrk_r+0x1a>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_sbrk_r+0x1a>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	200001e0 	.word	0x200001e0

08003084 <__sread>:
 8003084:	b510      	push	{r4, lr}
 8003086:	460c      	mov	r4, r1
 8003088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308c:	f000 f8a0 	bl	80031d0 <_read_r>
 8003090:	2800      	cmp	r0, #0
 8003092:	bfab      	itete	ge
 8003094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003096:	89a3      	ldrhlt	r3, [r4, #12]
 8003098:	181b      	addge	r3, r3, r0
 800309a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800309e:	bfac      	ite	ge
 80030a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80030a2:	81a3      	strhlt	r3, [r4, #12]
 80030a4:	bd10      	pop	{r4, pc}

080030a6 <__swrite>:
 80030a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030aa:	461f      	mov	r7, r3
 80030ac:	898b      	ldrh	r3, [r1, #12]
 80030ae:	05db      	lsls	r3, r3, #23
 80030b0:	4605      	mov	r5, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4616      	mov	r6, r2
 80030b6:	d505      	bpl.n	80030c4 <__swrite+0x1e>
 80030b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030bc:	2302      	movs	r3, #2
 80030be:	2200      	movs	r2, #0
 80030c0:	f000 f868 	bl	8003194 <_lseek_r>
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ce:	81a3      	strh	r3, [r4, #12]
 80030d0:	4632      	mov	r2, r6
 80030d2:	463b      	mov	r3, r7
 80030d4:	4628      	mov	r0, r5
 80030d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030da:	f000 b817 	b.w	800310c <_write_r>

080030de <__sseek>:
 80030de:	b510      	push	{r4, lr}
 80030e0:	460c      	mov	r4, r1
 80030e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e6:	f000 f855 	bl	8003194 <_lseek_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	bf15      	itete	ne
 80030f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80030f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030fa:	81a3      	strheq	r3, [r4, #12]
 80030fc:	bf18      	it	ne
 80030fe:	81a3      	strhne	r3, [r4, #12]
 8003100:	bd10      	pop	{r4, pc}

08003102 <__sclose>:
 8003102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003106:	f000 b813 	b.w	8003130 <_close_r>
	...

0800310c <_write_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d07      	ldr	r5, [pc, #28]	; (800312c <_write_r+0x20>)
 8003110:	4604      	mov	r4, r0
 8003112:	4608      	mov	r0, r1
 8003114:	4611      	mov	r1, r2
 8003116:	2200      	movs	r2, #0
 8003118:	602a      	str	r2, [r5, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	f7fd fccf 	bl	8000abe <_write>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d102      	bne.n	800312a <_write_r+0x1e>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	b103      	cbz	r3, 800312a <_write_r+0x1e>
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	200001e0 	.word	0x200001e0

08003130 <_close_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4d06      	ldr	r5, [pc, #24]	; (800314c <_close_r+0x1c>)
 8003134:	2300      	movs	r3, #0
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	f7fd fcdb 	bl	8000af6 <_close>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_close_r+0x1a>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_close_r+0x1a>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200001e0 	.word	0x200001e0

08003150 <_fstat_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d07      	ldr	r5, [pc, #28]	; (8003170 <_fstat_r+0x20>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	602b      	str	r3, [r5, #0]
 800315e:	f7fd fcd6 	bl	8000b0e <_fstat>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	d102      	bne.n	800316c <_fstat_r+0x1c>
 8003166:	682b      	ldr	r3, [r5, #0]
 8003168:	b103      	cbz	r3, 800316c <_fstat_r+0x1c>
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	bd38      	pop	{r3, r4, r5, pc}
 800316e:	bf00      	nop
 8003170:	200001e0 	.word	0x200001e0

08003174 <_isatty_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d06      	ldr	r5, [pc, #24]	; (8003190 <_isatty_r+0x1c>)
 8003178:	2300      	movs	r3, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	f7fd fcd5 	bl	8000b2e <_isatty>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_isatty_r+0x1a>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_isatty_r+0x1a>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	200001e0 	.word	0x200001e0

08003194 <_lseek_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4d07      	ldr	r5, [pc, #28]	; (80031b4 <_lseek_r+0x20>)
 8003198:	4604      	mov	r4, r0
 800319a:	4608      	mov	r0, r1
 800319c:	4611      	mov	r1, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	602a      	str	r2, [r5, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f7fd fcce 	bl	8000b44 <_lseek>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_lseek_r+0x1e>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_lseek_r+0x1e>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	200001e0 	.word	0x200001e0

080031b8 <__malloc_lock>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__malloc_lock+0x8>)
 80031ba:	f7ff be0b 	b.w	8002dd4 <__retarget_lock_acquire_recursive>
 80031be:	bf00      	nop
 80031c0:	200001d4 	.word	0x200001d4

080031c4 <__malloc_unlock>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__malloc_unlock+0x8>)
 80031c6:	f7ff be06 	b.w	8002dd6 <__retarget_lock_release_recursive>
 80031ca:	bf00      	nop
 80031cc:	200001d4 	.word	0x200001d4

080031d0 <_read_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	4d07      	ldr	r5, [pc, #28]	; (80031f0 <_read_r+0x20>)
 80031d4:	4604      	mov	r4, r0
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	602a      	str	r2, [r5, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	f7fd fc50 	bl	8000a84 <_read>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d102      	bne.n	80031ee <_read_r+0x1e>
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	b103      	cbz	r3, 80031ee <_read_r+0x1e>
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	bd38      	pop	{r3, r4, r5, pc}
 80031f0:	200001e0 	.word	0x200001e0

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
